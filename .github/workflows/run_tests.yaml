name: Run Tests

on:
  workflow_call:
    inputs:
      # empty (runs all packages), or one of the following: 'falco', 'falcoctl', 'k8saudit'
      package:
        required: false
        type: string
        default: ''
      # a valid git ref from falcosecurity/testing to run tests with
      code_ref:
        required: false
        type: string
        default: ''
      # one of the following, or a comma-separated list: 'all', 'none', 'pass', 'skip', or 'fail'
      summary_show:
        required: false
        type: string
        default: 'all'
      # a base container image to un the worflow into
      container_image:
        required: false
        type: string
        default: ''

jobs:
  build:
    name: Run Tests
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.container_image || '' }}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'

      - name: Checkout falcosecurity/testing
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.code_ref || '' }}

      # note: this converts the output of go test into a junit-compatible,
      # which can later be processed by test-summary/action to upload
      # a Markdown report on the GitHub Actions workflow.
      - name: Install go-junit-report
        run: |
          go install github.com/jstemmer/go-junit-report/v2@latest

      - name: Run Go Generate
        run: |
          go generate ./...
      
      - name: Run Tests (all packages)
        if: inputs.package == ''
        run: |
          ./build/falco.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          ./build/falcoctl.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          ./build/k8saudit.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          cat ./report.txt | go-junit-report -set-exit-code > report.xml

      - name: Run Tests (single package)
        if: inputs.package != ''
        run: |
          ./build/${{ inputs.package }}.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          cat ./report.txt | go-junit-report -set-exit-code > report.xml

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "report.xml"
          show: ${{ inputs.summary_show || 'all' }}
        if: always() # note: upload the report even if tests fail
