name: 'testing'
description: 'All-purpose test suite for Falco and its ecosystem.'

inputs:
  test-falco:
    description: 'Whether to run Falco tests. Default enabled.'
    required: false
    default: 'true'
  test-falcoctl:
    description: 'Whether to run Falcoctl tests. Default disabled.'
    required: false
    default: 'false'
  test-k8saudit:  
    description: 'Whether to run k8saudit tests. Default disabled.'
    required: false
    default: 'false'
  test-drivers:  
    description: 'Whether to run drivers tests. Default disabled.'
    required: false
    default: 'false'  
  static:
    description: 'Whether to run Falco in static mode during tests. Default disabled.'
    required: false
    default: 'false'
  show-all:
    description: 'Whether to upload all tests summary, not just failed.'
    required: false
    default: 'false'
  sudo:
    description: 'Specify a sudo command. Put it empty when sudo is not available.'
    required: false
    default: 'sudo'

outputs:
  report:
    description: "Generated report xml"
    value: ${{ steps.store-outputs.outputs.report }} 

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version-file: "${{ github.action_path }}/go.mod"

    # note: this converts the output of go test into a junit-compatible,
    # which can later be processed by test-summary/action to upload
    # a Markdown report on the GitHub Actions workflow.
    - name: Install go-junit-report
      shell: bash
      run: |
        go install github.com/jstemmer/go-junit-report/v2@latest

    - name: Generate test files
      working-directory: ${{ github.action_path }}
      shell: bash
      run: |
        go generate ./...
        
    - name: Install needed artifacts using falcoctl
      if: ${{ inputs.static == 'false' }}
      shell: bash
      run: |
        ${{ inputs.sudo }} mkdir -p /usr/share/falco/plugins
        ${{ inputs.sudo }} falcoctl artifact install k8saudit-rules
        ${{ inputs.sudo }} falcoctl artifact install cloudtrail-rules
   
    - name: Install dependencies for falco-driver-loader tests
      if: ${{ inputs.arch == 'x86_64' }}
      shell: bash
      run: |
        ${{ inputs.sudo }} apt update -y
        ${{ inputs.sudo }} apt install -y --no-install-recommends build-essential clang make llvm gcc dkms linux-headers-$(uname -r)
    
    - name: Install dependencies for falco-driver-loader tests
      if: ${{ inputs.arch == 'aarch64' }}
      uses: self-actuated/get-kernel-sources@master
    
    - name: Run tests
      working-directory: ${{ github.action_path }}
      env:
        # fixme(leogr): this is a workaround for https://github.com/falcosecurity/falco/issues/2784
        HOST_ROOT: ""
      shell: bash  
      run: |
        if ${{ inputs.test-falco && 'true' || 'false' }}; then
          ./build/falco.test -falco-static=${{ inputs.static && 'true' || 'false' }} -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
        fi
        if ${{ inputs.static && 'false' || 'true' }}; then
          if ${{ inputs.test-falcoctl && 'true' || 'false' }}; then
            ./build/falcoctl.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          fi
          if ${{ inputs.test-k8saudit && 'true' || 'false' }}; then
            ./build/k8saudit.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          fi
          if ${{ inputs.test-drivers && 'true' || 'false' }}; then
            ${{ inputs.sudo }} ./build/falco-driver-loader.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          fi
        fi
        cat ./report.txt | go-junit-report -set-exit-code > report.xml
        
    - name: Set output
      id: store-outputs
      shell: bash
      run: |
        echo "report=${{ github.action_path }}/report.xml" >> $GITHUB_OUTPUT

    - name: Test Summary
      if: always() # note: upload the report even if tests fail
      uses: test-summary/action@62bc5c68de2a6a0d02039763b8c754569df99e3f
      with:
        paths: "${{ github.action_path }}/report.xml"
        show: ${{ inputs.show-all && 'all' || 'fail' }}
